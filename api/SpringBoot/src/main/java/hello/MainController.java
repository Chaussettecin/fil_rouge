package hello;



	import java.util.Optional; 

	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.stereotype.Controller;
	import org.springframework.web.bind.annotation.RequestMapping;
	import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;
	import org.springframework.web.bind.annotation.ResponseBody;

	import hello.Users;
	import hello.UserRepository; 

	@Controller    // This means that this class is a Controller
	@RequestMapping(path="/user") // This means URL's start with /demo (after Application path)
	public class MainController {
		@Autowired // This means to get the bean called userRepository
		           // Which is auto-generated by Spring, we will use it to handle the data
		private UserRepository userRepository;

		@GetMapping(path="/add") // Map ONLY GET Requests
		public @ResponseBody String addNewUser (@RequestParam String name
				, @RequestParam String email) {
			// @ResponseBody means the returned String is the response, not a view name
			// @RequestParam means it is a parameter from the GET or POST request

			Users n = new Users(); 
			n.setName(name); 
			n.setEmail(email);
			userRepository.save(n);
			return n.getName()+" Saved";
		}
		
		@GetMapping(path="/del")
		public @ResponseBody String eraseUser(@RequestParam String mail) {
			
			String msg;
			Users n = (Users) userRepository.findDistinctByEmail(mail);
			msg=n.getName();
			userRepository.deleteById(n.getId());
			return msg+" Deleted";
		}

		@GetMapping(path="/all")
		public @ResponseBody Iterable<Users> getAllUsers() {
			// This returns a JSON or XML with the users
			return userRepository.findAll();
		}
		
		@GetMapping(path="/get")
		public @ResponseBody Optional<Users> getUsersById(@RequestParam int id) {
			// This returns a JSON or XML with the users
			return userRepository.findById(id); 
		}
		@GetMapping(path="/getbymail/{email}")
		public @ResponseBody Users getUsersByEmail(@PathVariable("email") String email) {
			// This returns a JSON or XML with the users
			Users n = userRepository.findDistinctByEmail(email);
			if (!(n.getEmail()=="" || n.getName()==""))
				return n;
			return null; 
		}
		
		@GetMapping(path="/getbyname/{name}")
			public @ResponseBody Users getUsersByName(@PathVariable("name") String name) {
				// This returns a JSON or XML with the users
				Users n = userRepository.findByName(name);	
				if (!(n.getEmail()=="" || n.getName()=="")) 
						return n;
				return  null;
		 
		}
		
		@GetMapping(path="/manual") 
		public @ResponseBody String manual() {
			
		
			return "/manual pour ce manuel<br>/all pour voir toute la table \n<br> /add pour ajouter une table ex /add?name=toto&email=toto@mail.com"
					+ "\n<br> /del pour effacer par email : ex /del?name=toto";
		}
	
}
